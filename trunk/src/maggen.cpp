/**
  *  \file		maggen.cpp
  *  \brief		Tool for generation of Static Evaluators for Multiplans Attribute Grammar.\n
  *
  *  \date		09/02/2010
  *  \author	Kilmurray, Gerardo Luis <gerakilmurray@gmail.com>
  *  \author	Picco, Gonzalo Martin <gonzalopicco@gmail.com>
  */

/** magGen: Generador de evaluadores estáticos para gramáticas de atributos multiplanes.\n
  * http://code.google.com/p/genevalmag/\n
  * Copyright (C) 2010 Kilmurray - Picco, UNRC\n
  *
  * System:         magGen\n
  * Homepage:       <http://code.google.com/p/genevalmag/>\n
  * Language:       C++\n
  *\n
  * Authors:        Kilmurray Gerardo Luis\n
  * Authors:        Picco Gonzalo Martín\n
  * E-Mail:         gerakilmurray AT gmail.com\n
  * E-Mail:         gonzalopicco AT gmail.com\n
  *\n
  * magGen is free software: you can redistribute it and/or modify\n
  * it under the terms of the GNU General Public License as published by\n
  * the Free Software Foundation, either version 3 of the License, or\n
  * (at your option) any later version.\n
  *
  * magGen is distributed in the hope that it will be useful,\n
  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n
  * GNU General Public License for more details.\n
  *
  * You should have received a copy of the GNU General Public License\n
  * along with magGen. If not, see <http://www.gnu.org/licenses/>.\n
  */

/**
  * \mainpage maggen - Generator of Static Evaluator of Multiplan Attribute Grammar.
  *
  * <br>Director: Marcelo Daniel Arroyo <br>
  *
  * \author Kilmurray, Gerardo Luis <gerakilmurray@gmail.com>
  * \author Picco, Gonzalo Martin <gonzalopicco@gmail.com>
  *
  * \date Mayo 2010
  *
  * \section intro Introducción
  *
  * Trabajo realizado en el marco de la Tesis de Licenciatura en Ciencias de la Computación.
  *
  * En este repositorio podrá encontrar:\n
  * - bin      : Contiene el binario de maggen y archivos necesarios para la generación del evaluador.
  * - doc      : Contiene toda la documentación y tutoriales de la herramienta.
  * - include  : Contiene las cabeceras para incluir los archivos que permiten parsing y analisis de MAG,
  *              generación de grafos, planes y secuencias de visitas.
  * - src      : Contiene todos los archivos de implementación de la herramienta.
  * - examples : Contiene ejemplos para ver el funcionamiento de maggen.
  * - scripts  : Contiene scripts en bash para convertir archivos .dot en imágenes PNG.
  *
  * Enlaces principales:
  * <A HREF="http://code.google.com/p/genevalmag/"> Genevalmag GoogleCode </A>
  *
  * \section notes Notas
  * En etapa de escritura del informe
  *
  * \section requirements Requerimientos
  * Para compilar la herramienta magGen, se necesita:
  * - Boost libraries 1.41
  * - g++ 4.3.3
  *
  * <br><img src="http://genevalmag.googlecode.com/files/logo.png"><br>
  *
  */

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string>
#include <time.h>
#include <sys/time.h>
#include <sys/stat.h>

#include <boost/tokenizer.hpp>

#include "../include/Util/Utilities.h"
#include "../include/Maglib.h"

using namespace std;
using namespace boost;
using namespace utilities;

namespace genevalmag
{

/**
  *	Default output path of the generation code.
  */
const string DEFAULT_PATH("./out_maggen/");

/**
  *	Default name of the files generated by the library.
  */
const string DEFAULT_FILE_NAME("mag_eval");

/**
  *	Default input file.
  */
const string DEFAULT_INPUT_FILE("/tmp/.input_maggen_default");

/* retorna "a - b" en segundos */
double timeval_diff(struct timeval *a, struct timeval *b)
{
  return
    (double)(a->tv_sec + (double)a->tv_usec/1000000) -
    (double)(b->tv_sec + (double)b->tv_usec/1000000);
}

bool check_file_exist(const string &strFilename)
{
	struct stat stFileInfo;
	int intStat(stat(strFilename.c_str(), &stFileInfo));
	bool result = (intStat == 0);
	if (!result)
	{
		cerr << "ERROR: Path non exist: " << strFilename << endl;
	}
	return result;
}

bool check_name(const string &strFilename)
{
	typedef boost::tokenizer< boost::char_separator<char> > tokenizer;
	boost::char_separator<char> sep("/");
	tokenizer tokens(strFilename, sep);

	vector<string> words(tokens.begin(), tokens.end());

	if (strFilename[0] != '-' &&
		words.size() == 1)
	{
		return true;
	}
	return false;
}

void show_help_information()
{
	string help("Usage: maggen [OPTIONS]\n\n");
	help.append("        where OPTIONS include:\n");
	help.append("             -f  file      Define the input file of the tool. Othercase, uses the standart input (cin).\n");
	help.append("             -i  header    Including header '.h' or '.hpp' file for resolve externs variables in generated code.\n");
	help.append("             -fo folder    Defines the folder output for output generated information.Othercase, uses \"./out_maggen/\".\n");
	help.append("             -o  name      Defines the names files generated tool. Otherwise, uses \"mag_eval\".\n");
	help.append("             -h            Show this help message.\n");
	cout << help << endl;
}

/**
 * maggen [OPTIONS]
 * where OPTIONS include:
 *         -f  file      Define the input file of the tool. Othercase, uses the standart input (cin).
  *        -i  header    Including header '.h' or '.hpp' file for resolve externs variables in generated code.
 *         -fo folder    Defines the folder output for output generated information. Othercase, uses "./out_maggen/".
 *         -o  name      Defines the names files generated tool. Otherwise, uses "mag_eval".
 *         -h            Show this help message.
 */
bool parse_parameters(int argc, char *argv[], string &path_input_file, string &path_folder_output, string &name_library, vector<string> &headers)
{
	bool file_input_setup(false);
	bool folder_output_setup(false);
	bool name_file_output_setup(false);

	int i(1);
	while (i < argc)
	{
		if (argc > i + 1)
		{
			string arg_i (argv[i++]);
			string value_arg_i(argv[i++]);
			if ((arg_i.compare("-f") == 0) && (!file_input_setup) && (check_file_exist(value_arg_i)))
			{
				file_input_setup = true;
				path_input_file = value_arg_i;
			}
			else if ((arg_i.compare("-fo") == 0) && (!folder_output_setup))
			{
				folder_output_setup = true;
				path_folder_output = value_arg_i;
			}
			else if ((arg_i.compare("-o") == 0) && (!name_file_output_setup) && (check_name(value_arg_i)))
			{
				name_file_output_setup = true;
				name_library = value_arg_i;
			}
			else if ((arg_i.compare("-i") == 0) && (check_file_exist(value_arg_i)))
			{
				headers.push_back(value_arg_i);
			}
			else if (arg_i.compare("-h") == 0)
			{
				show_help_information();
				exit(0);
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	return true;
}
}

using namespace genevalmag;

/**
  * Main method of the parsing.
  */
int main
(
	int argc,      /* Number of strings in array argv. */
	char *argv[],  /* Array of command-line argument strings. */
	char *envp[]   /* Array of environment variable string. */
)
{
	struct timeval t_ini, t_fin;
	double secs;
	gettimeofday(&t_ini, NULL);

	string path_input_file(DEFAULT_INPUT_FILE);
	string path_folder_output(DEFAULT_PATH);
	string name_library(DEFAULT_FILE_NAME);
	vector<string> headers;

	if((argc == 1) ||
	   (!parse_parameters(argc, argv, path_input_file, path_folder_output, name_library, headers)) ||
	   (!clean_output_folder(path_folder_output)))
	{
		string err_use("ERROR: maggen wrong uses.\n\n");
		cerr << err_use << endl;
		show_help_information();
		exit(-1);
	}

	if (DEFAULT_INPUT_FILE == path_input_file)
	{
	    string line;
		std::ofstream file_input(path_input_file.c_str());
	    while (!cin.eof())
	    {
	        getline(cin, line);
	        line.append("\n");
	        file_input.write(line.c_str(), line.size());
	    }
	    file_input.close();
	}

	int exit_code(-1);

	Maglib gen;
	exit_code = gen.gen_evaluator(path_input_file, path_folder_output, name_library, headers);

	if (exit_code == 0)
	{
		gettimeofday(&t_fin, NULL);
		secs = timeval_diff(&t_fin, &t_ini);
		printf("\nGeneration complete in: %.6g seconds.\n", secs);
	}

	return exit_code;
}
