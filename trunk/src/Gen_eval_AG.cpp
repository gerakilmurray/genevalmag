/**
  *  \file		Gen_eval_AG.cpp
  *  \brief		Main module.
  *  \date		09/02/2010
  *  \author	Kilmurray, Gerardo Luis <gerakilmurray@gmail.com>
  *  \author	Picco, Gonzalo Martin <gonzalopicco@gmail.com>
  */

#include <stdio.h>
#include <iostream>
#include <string>
#include <time.h>
#include <sys/time.h>
#include <sys/stat.h>

#include <boost/tokenizer.hpp>

#include "Attr_grammar/Attr_grammar.h"
#include "Util/Utilities.h"
#include "Parser/Parser_AG.h"
#include "Evaluation/Builder_plans.h"
#include "Evaluation/Builder_visit_sequences.h"
#include "Generator/Gen_code.h"

using namespace std;
using namespace boost;
using namespace utilities;

namespace genevalmag
{

/**
  *	Default output path of the generation code.
  */
const string DEFAULT_PATH("./GenEvalAG/");

/**
  *	Default name of the files generated by the library.
  */
const string DEFAULT_FILE_NAME("Eval_mag");

/* retorna "a - b" en segundos */
double timeval_diff(struct timeval *a, struct timeval *b)
{
  return
    (double)(a->tv_sec + (double)a->tv_usec/1000000) -
    (double)(b->tv_sec + (double)b->tv_usec/1000000);
}

bool check_file_exist(const string &strFilename)
{
	struct stat stFileInfo;
	int intStat(stat(strFilename.c_str(), &stFileInfo));
	return (intStat == 0);
}

bool check_name(const string &strFilename)
{
	typedef boost::tokenizer< boost::char_separator<char> > tokenizer;
	boost::char_separator<char> sep("/");
	tokenizer tokens(strFilename, sep);

	vector<string> words(tokens.begin(), tokens.end());

	if (strFilename[0] != '-' &&
		words.size() == 1)
	{
		return true;
	}
	return false;
}

/**
  *	GenevalMag  [OPTION] -f <input_file>
  *	where [OPTION]:
  *		-i 	Including header "h" or "hpp" file for resolve externs variables in generated code.
  *		-fo Define the folder output for output generated information.
  *		-o	Define the names files generated library.
  */
void out_error_information()
{
	string err_use("ERROR: Genevalmag wrong uses.\n    Uses:\n\n");
	err_use.append("        GenevalMag [OPTIONS] -f input_file\n\n");
	err_use.append("        where [OPTIONS]:\n");
	err_use.append("             -i header    Including header '.h' or '.hpp' file for resolve externs variables in generated code.\n");
	err_use.append("            -fo folder    Defines the folder output for output generated information.\n");
	err_use.append("             -o name      Defines the names files generated library.\n");
	cerr << err_use << endl;
	exit(-1);
}

bool parse_parameters(int argc, char *argv[], string &path_input_file, string &path_folder_output, string &name_library, vector<string> &headers)
{
	bool file_input_setup(false);
	bool folder_output_setup(false);
	bool name_file_output_setup(false);

	int i(1);
	while (i < argc)
	{
		if (argc > i + 1)
		{
			string arg_i (argv[i++]);
			string value_arg_i(argv[i++]);
			if ((arg_i.compare("-f") == 0) && (!file_input_setup) && (check_file_exist(value_arg_i)))
			{
				file_input_setup = true;
				path_input_file = value_arg_i;
			}
			else if ((arg_i.compare("-fo") == 0) && (!folder_output_setup))
			{
				folder_output_setup = true;
				path_folder_output = value_arg_i;
			}
			else if ((arg_i.compare("-o") == 0) && (!name_file_output_setup) && (check_name(value_arg_i)))
			{
				name_file_output_setup = true;
				name_library = value_arg_i;
			}
			else if ((arg_i.compare("-i") == 0) && (check_file_exist(value_arg_i)))
			{
				headers.push_back(value_arg_i);
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	return true;
}

}

using namespace genevalmag;

/**
  * Main method of the parsing.
  */
int main
(
	int argc,      /* Number of strings in array argv. */
	char *argv[],  /* Array of command-line argument strings. */
	char *envp[]   /* Array of environment variable string. */
)
{
	struct timeval t_ini, t_fin;
	double secs;
	gettimeofday(&t_ini, NULL);

	string path_input_file;
	string path_folder_output(DEFAULT_PATH);
	string name_library(DEFAULT_FILE_NAME);
	vector<string> headers;

	if((argc == 1) ||
	   (!parse_parameters(argc, argv, path_input_file, path_folder_output, name_library, headers)) ||
	   (!clean_output_folder(path_folder_output)) ||
	   (path_input_file.empty()))
	{
		out_error_information();
	}

	int exit_code(-1);

	Parser_AG p_mag;
	if (p_mag.parse_grammar(path_input_file))
	{
		Builder_plans b_plans(path_folder_output);
		if (b_plans.build_plans(p_mag.get_attr_grammar()))
		{
			Builder_visit_sequences b_visit_seq;
			if (b_visit_seq.generate_visit_sequences(p_mag.get_attr_grammar(), b_plans))
			{
				Gen_code gen(path_folder_output, name_library );
				if(gen.generate_code(p_mag.get_attr_grammar(), b_plans, b_visit_seq.get_visit_seq()))
				{
					exit_code = 0;
				}
			}
		}
	}
	gettimeofday(&t_fin, NULL);
	secs = timeval_diff(&t_fin, &t_ini);
	printf("\nGeneration complete in: %.6g seconds.\n", secs);

	return exit_code;
}
