/**
  *  \file		grammar.txt
  *  \brief		File with a Attribute Grammar example that specific an AST.
  *  \date		05/11/2009
  *  \author	Kilmurray, Gerardo Luis <gerakilmurray@gmail.com>
  *  \author	Picco, Gonzalo Martin <gonzalopicco@gmail.com>
  */

/****************************
 * Block of Semantic Domain *
 ****************************/
semantic domain
	/*****************
	 * List of Sorts *
	 *****************/
	sort int;
	sort string, character;
	sort pepe;
	sort adrian;

	/*********************
	 * List of Operators *
	 *********************/
	op infix	(5, left)		+  : int, int	-> int;
	op infix	(50,non-assoc)	*  : int, int	-> int;
	op 			(99,_)			sqr: int		-> int;
	op postfix					&  : int		-> int;	
	op prefix	(_,right)		%  : string		-> string;
	op 			(8,non-assoc)	%  : string		-> adrian;
	op infix	(5,left)		+  : int, int	-> string;
	op prefix (_,left) + : int -> int;
		
	/*********************
	 * List of Functions *
	 *********************/
	function	f: int, int -> string;
	function	g: string	-> int;
	
/***********************
 * Block of Attributes *
 ***********************/
attributes
	valor			: syn	<int>		of all;
	lexema, termino	: syn	<string>	of all - {E, T};
	lexx			: syn	<string>	of all - {T};
	type			: inh	<string>	of all;
	grade			:		<int>		of {E};
	
/******************
 * Block of Rules *
 ******************/
rules
	E ::=	E '+' T
				compute
					E[0].valor = T[1].valor * %%T[2].valor& + +T[3].valor;
				end
		| 	T
			  	compute
			  		E[0].valor =  f (T[4].valor& & & & &);
	  			end
		;

	T ::=	id '*' id
				compute
					T[0].valor = id[5].valor * id[6].valor;
					T[0].type = "id";
				end
		;

	id ::=	'1' 
				compute
					id[0].valor = 1; 
					id[0].type = "int"; 
				end
	     |  '0'
				compute
					id[0].valor = 0; 
					id[0].type = "int"; 
				end
		;